{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Let's build from here","text":"<p>Build, maintain, test, and distribute your mobile apps. Let your clients manage their content.</p> Get started Log in"},{"location":"#build-fully-featured-apps-in-record-time","title":"Build fully-featured apps in record time","text":"<p>AppAmbit focuses on getting you from 0 to production as quickly, painlessly, and securely as possible.</p> \ud83d\udd10 Auth <p>Email/Password, OAuth, personal access tokens, and much more.</p> \ud83d\udcbe Databases <p>Treat your data like you usually would with our ORM or expose data through our CMS for your clients to manage on their own.</p> \ud83d\udcc1 Storage <p>Easily and securely upload and manage files.</p> \u03bb Functions <p>Create and deploy one-off serverless functions that can be triggered by a variety of events and workflows.</p> \ud83d\udce8 Messaging <p>Send push notifications, emails, and SMS.</p> \ud83d\udd11 Permissions <p>Easily assign roles and permissions to your team members and your clients.</p>"},{"location":"#we-didnt-reinvent-the-wheel","title":"We didn't reinvent the wheel","text":"<p>We just made getting from point A to point B ridiculously easy.</p> <p>AppAmbit aims to be fast, simple, and quick in delivering what you need when it comes to creating mobile applications.</p>"},{"location":"Authentication/auth/","title":"Authenticating requests","text":""},{"location":"Authentication/auth/#authentication","title":"Authentication","text":""},{"location":"Authentication/auth/#authenticating-requests","title":"Authenticating Requests","text":"<p>To authenticate requests, include an <code>Authorization</code> header with the value <code>\"Bearer {YOUR_AUTH_KEY}\"</code>.</p> <p>!!! info     All authenticated endpoints are marked with a requires authentication badge in the documentation below.</p>"},{"location":"Authentication/auth/#retrieving-your-token","title":"Retrieving Your Token","text":"<p>You can retrieve your token by visiting your dashboard and clicking Generate API token.</p>"},{"location":"Authentication/auth/#example-request","title":"Example Request","text":"<p>```bash curl -X GET \\   https://api.example.com/v1/users \\   -H \"Authorization: Bearer your_api_token_here\"</p>"},{"location":"NetMAUI/Analytics_MAUI/","title":"App Center Analytics (MAUI and Xamarin)","text":"Important: Visual Studio App Center is scheduled for retirement on March 31, 2025. While you can continue to use Visual Studio App Center until it is fully retired, there are several recommended alternatives that you may consider migrating to. Learn more about support timelines and alternatives.  <p>App Center Analytics helps you understand user behavior and customer engagement to improve your app. The SDK automatically captures session count and device properties like model, OS version, etc. You can define your own custom events to measure things that matter to you. All the information captured is available in the App Center portal for you to analyze the data.</p> <p>Follow the Getting Started section if you haven't set up the SDK in your application yet.</p>"},{"location":"NetMAUI/Analytics_MAUI/#session-and-device-information","title":"Session and device information","text":"<p>Once you add App Center Analytics to your app and start the SDK, it will automatically track sessions and device properties like OS Version, model, etc. without writing any additional code.</p>"},{"location":"NetMAUI/Analytics_MAUI/#country-code","title":"Country Code","text":"<p>The SDK automatically reports a user's country code if the device has a mobile data modem and a SIM card installed. WiFi-only devices won't report a country code by default. To set the country code of those users, you must retrieve your user's location yourself and use the SetCountryCode method in the SDK:</p> csharp Copy <pre><code>AppCenter.SetCountryCode(\"en\");</code></pre> Note: For country code to be displayed on Analytics sessions, AppCenter.SetCountryCode must be called prior to calling AppCenter.Start."},{"location":"NetMAUI/Analytics_MAUI/#custom-events","title":"Custom events","text":"<p>You can track your own custom events with up to 20 properties to understand the interaction between your users and the app.</p> <p>Once you've started the SDK, use the TrackEvent() method to track your events with properties. You can send up to 200 distinct event names. Also, there's a maximum limit of 256 characters per event name and 125 characters per event property name and event property value.</p> csharp Copy <pre><code>Analytics.TrackEvent(\"Video clicked\", new Dictionary {\n    { \"Category\", \"Music\" },\n    { \"FileName\", \"favorite.avi\"}\n});\n\n\n<p>Properties for events are entirely optional \u2013 if you just want to track an event, use this sample instead:</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>Analytics.TrackEvent(\"Video clicked\");</code></pre>"},{"location":"NetMAUI/Analytics_MAUI/#enable-or-disable-app-center-analytics-at-runtime","title":"Enable or disable App Center Analytics at runtime","text":"<p>You can enable and disable App Center Analytics at runtime. If you disable it, the SDK won't collect any more analytics information for the app.</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>Analytics.SetEnabledAsync(false);</code></pre>\n\n\n<p>To enable App Center Analytics again, use the same API but pass true as a parameter.</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>Analytics.SetEnabledAsync(true);</code></pre>\n\n\n<p>You don't need to await this call to make other API calls (such as IsEnabledAsync) consistent.</p>\n<p>The state is persisted in the device's storage across application launches.</p>\n\n  Note: This method must only be used after Analytics has been started."},{"location":"NetMAUI/Analytics_MAUI/#check-if-app-center-analytics-is-enabled","title":"Check if App Center Analytics is enabled","text":"<p>You can also check if App Center Analytics is enabled or not.</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>bool isEnabled = await Analytics.IsEnabledAsync();</code></pre>\n\n\n\n  Note: This method must only be used after Analytics has been started, it will always return false before start."},{"location":"NetMAUI/Analytics_MAUI/#manage-start-session","title":"Manage start session","text":"<p>By default, the session ID depends on the lifecycle of the application. If you want to control the start of a new session manually, follow the next steps:</p>\n\n  Note: Pay attention that each call of Analytics.StartSession() API will generate a new session. If in manual session tracker mode this API will not be called then all sending logs will have a null session value.\n\n\n\n  Note: Pay attention that after a new application launch the session id will be regenerated.\n\n\n<p>Call the following method before the SDK start:</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>Analytics.EnableManualSessionTracker();</code></pre>\n\n\n<p>Then you can use the StartSession API after the AppCenter.Start:</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>Analytics.StartSession();</code></pre>"},{"location":"NetMAUI/Analytics_MAUI/#local-storage-size","title":"Local storage size","text":"<p>By default, the SDK stores up to 10 MB of logs in the storage.</p>"},{"location":"NetMAUI/Analytics_MAUI/#no-internet-access","title":"No internet access","text":"<p>When there isn't any network connectivity, the SDK saves up to 10 MB of logs in the local storage. Once the storage is full, the SDK will start discarding old logs to make room for the new logs. Once the device gets internet access back, the SDK will send logs in the batch of 50 or after every 6 seconds.</p>"},{"location":"NetMAUI/Analytics_MAUI/#batching-event-logs","title":"Batching event logs","text":"<p>The App Center SDK uploads logs in a batch of 50 and if the SDK doesn't have 50 logs to send, it will still send logs after 6 seconds. There can be a maximum of three batches sent in parallel.</p>"},{"location":"NetMAUI/Analytics_MAUI/#retry-and-back-off-logic","title":"Retry and back-off logic","text":"<p>App Center SDK supports back-off retries on recoverable network errors. Below is the retry logic:</p>\n<ul>\n<li>3 tries maximum per request.</li>\n<li>Each request has its own retry state machine.</li>\n<li>All the transmission channels are disabled (until next app process) after one request exhausts all its retries.</li>\n</ul>"},{"location":"NetMAUI/Analytics_MAUI/#back-off-logic","title":"Back-off logic","text":"<ul>\n<li>50% randomization, first retry between 5s and 10s, second retry between 2.5 and 5 minutes, last try between 10 and 20 minutes.</li>\n<li>If network switches from off to on (or from wi-fi to mobile), retry states are reset and requests are retried immediately.</li>\n</ul>"},{"location":"NetMAUI/crashDetection/","title":"App Center Crashes (MAUI and Xamarin)","text":"Important: Appmit  App Center is scheduled for retirement on March 31, 2025. While you can continue to use Appmit App Center until it is fully retired, there are several recommended alternatives that you may consider migrating to. Learn more about support timelines and alternatives.  <p>App Center Crashes automatically generates a crash log every time your app crashes. The log is first written to the device's storage and when the user starts the app again, the crash report will be sent to App Center. This feature works for both beta and live apps, providing valuable information to help fix crashes.</p> Note: On iOS and Mac, the SDK won't save any crash log if a debugger is attached. On Android, you can crash while having a debugger attached, but you need to continue execution after breaking into the unhandled exception."},{"location":"NetMAUI/crashDetection/#generate-a-test-crash","title":"Generate a Test Crash","text":"<p>App Center Crashes provides an API to generate a test crash for easy testing of the SDK. This API only works in debug configurations.</p> csharp Copy <pre><code>Crashes.GenerateTestCrash();</code></pre>"},{"location":"NetMAUI/crashDetection/#get-information-about-previous-crashes","title":"Get Information About Previous Crashes","text":""},{"location":"NetMAUI/crashDetection/#check-for-low-memory-warning","title":"Check for Low Memory Warning","text":"<p>You can check if the app received a memory warning in the previous session:</p> csharp Copy <pre><code>bool hadMemoryWarning = await Crashes.HasReceivedMemoryWarningInLastSessionAsync();</code></pre>"},{"location":"NetMAUI/crashDetection/#check-if-app-crashed-in-previous-session","title":"Check if App Crashed in Previous Session","text":"<p>You can check if the app crashed in the previous launch:</p> csharp Copy <pre><code>bool didAppCrash = await Crashes.HasCrashedInLastSessionAsync();</code></pre>"},{"location":"NetMAUI/crashDetection/#get-details-about-the-last-crash","title":"Get Details About the Last Crash","text":"<p>If your app crashed previously, you can get details about the last crash:</p> csharp Copy <pre><code>ErrorReport crashReport = await Crashes.GetLastSessionCrashReportAsync();</code></pre>"},{"location":"NetMAUI/crashDetection/#customize-crash-reporting","title":"Customize Crash Reporting","text":""},{"location":"NetMAUI/crashDetection/#should-the-crash-be-processed","title":"Should the Crash be Processed?","text":"<p>You can decide if a particular crash needs to be processed:</p> csharp Copy <pre><code>Crashes.ShouldProcessErrorReport = (ErrorReport report) =&gt;\n{\n    // Check the report in here and return true or false depending on the ErrorReport.\n    return true;\n};</code></pre>"},{"location":"NetMAUI/crashDetection/#ask-for-user-consent","title":"Ask for User Consent","text":"<p>If you want to get user confirmation before sending a crash report:</p> csharp Copy <pre><code>Crashes.ShouldAwaitUserConfirmation = () =&gt;\n{\n    // Build your own UI to ask for user consent here. SDK doesn't provide one by default.\n    return true;\n};\n\n// Notify user confirmation result\nCrashes.NotifyUserConfirmation(UserConfirmation.DontSend);\nCrashes.NotifyUserConfirmation(UserConfirmation.Send);\nCrashes.NotifyUserConfirmation(UserConfirmation.AlwaysSend);</code></pre>"},{"location":"NetMAUI/crashDetection/#enable-or-disable-app-center-crashes-at-runtime","title":"Enable or Disable App Center Crashes at Runtime","text":"<p>You can enable and disable App Center Crashes at runtime:</p> csharp Copy <pre><code>// Disable\nawait Crashes.SetEnabledAsync(false);\n\n// Enable\nawait Crashes.SetEnabledAsync(true);\n\n// Check if enabled\nbool isEnabled = await Crashes.IsEnabledAsync();</code></pre>"},{"location":"NetMAUI/crashDetection/#handled-errors","title":"Handled Errors","text":"<p>App Center also allows you to track errors using handled exceptions:</p> csharp Copy <pre><code>try {\n    // your code goes here.\n} catch (Exception exception) {\n    var properties = new Dictionary\n    {\n        { \"Category\", \"Music\" },\n        { \"Wifi\", \"On\"}\n    };\n    var attachments = new ErrorAttachmentLog[]\n    {\n        ErrorAttachmentLog.AttachmentWithText(\"Hello world!\", \"hello.txt\"),\n        ErrorAttachmentLog.AttachmentWithBinary(Encoding.UTF8.GetBytes(\"Fake image\"), \"fake_image.jpeg\", \"image/jpeg\")\n    };\n    Crashes.TrackError(exception, properties, attachments);\n}"},{"location":"NetMAUI/getting/","title":"Get Started with MAUI and Xamarin","text":"Important: Visual Studio App Center is scheduled for retirement on March 31, 2025. While you can continue to use Visual Studio App Center until it is fully retired, there are several recommended alternatives that you may consider migrating to. Learn more about support timelines and alternatives.  <p>The App Center SDK uses a modular architecture so you can use any or all of the services. This guide will help you set up the App Center .NET SDK in your app to use App Center Analytics and App Center Crashes.</p>"},{"location":"NetMAUI/getting/#1-prerequisites","title":"1. Prerequisites","text":"<p>Before you begin, ensure that the following prerequisites are met:</p> <ul> <li>Your project is set up in Visual Studio or Visual Studio for Mac.</li> <li>You're targeting devices running iOS 11.0 or later or Android 5.0 (API level 21) or later.</li> <li>You're not using any other SDK that provides Crash Reporting functionality.</li> </ul>"},{"location":"NetMAUI/getting/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>MAUI iOS</li> <li>MAUI Android</li> <li>MAUI Windows</li> <li>.NET 6.0 macOS</li> <li>Xamarin.Android</li> <li>Xamarin.iOS</li> <li>Xamarin.Mac</li> <li>Xamarin.Forms (iOS, macOS Android, UWP and Windows Desktop applications)</li> </ul> Note: Currently there is no MAUI platform on the App Center portal. Please use Xamarin for iOS and Android and UWP for Windows."},{"location":"NetMAUI/getting/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"NetMAUI/getting/#xamarinandroid","title":"Xamarin.Android","text":"<p>Create an app on the App Center portal with Android as the OS and Xamarin as the platform.</p>"},{"location":"NetMAUI/getting/#xamarinios","title":"Xamarin.iOS","text":"<p>Create an app on the App Center portal with iOS as the OS and Xamarin as the platform.</p>"},{"location":"NetMAUI/getting/#xamarinmac","title":"Xamarin.Mac","text":"<p>Create an app on the App Center portal with macOS as the OS and Xamarin as the platform.</p> Warning: There is a known issue that prevents an app from being uploaded to the App Store. Follow the progress on GitHub."},{"location":"NetMAUI/getting/#xamarinforms-ios-macos-android-uwp-and-windows-desktop","title":"Xamarin.Forms (iOS, macOS, Android, UWP and Windows Desktop)","text":"<p>Create 5 apps on the App Center \u2013 one for each OS. Select Xamarin as the platform for Android, iOS and macOS applications (UWP and Desktop applications don't have a Xamarin option).</p>"},{"location":"NetMAUI/getting/#2-create-your-app-in-the-app-center-portal","title":"2. Create Your App in the App Center Portal","text":"<ol> <li>Go to appcenter.ms.</li> <li>Sign up or log in and click \"Add new\" &gt; \"Add new app\".</li> <li>Enter a name and an optional description for your app.</li> <li>Select the appropriate OS and platform for your project.</li> <li>Click \"Add new app\".</li> </ol> <p>Once created, you can obtain your App Secret from the Settings page.</p>"},{"location":"NetMAUI/getting/#3-add-the-app-center-sdk-to-your-solution","title":"3. Add the App Center SDK to Your Solution","text":"<p>You can integrate the App Center SDK using Visual Studio or the Package Manager Console.</p> shell Copy <pre><code>Install-Package Microsoft.AppCenter.Analytics\nInstall-Package Microsoft.AppCenter.Crashes</code></pre>"},{"location":"NetMAUI/getting/#4-start-the-sdk","title":"4. Start the SDK","text":"<p>To use App Center, you must opt in to the module(s) that you want to use. By default, no modules are started and you must explicitly call each of them when starting the SDK.</p>"},{"location":"NetMAUI/getting/#41-add-the-using-statements","title":"4.1 Add the Using Statements","text":"<p>Add the appropriate namespaces in your files:</p> csharp Copy <pre><code>using Microsoft.AppCenter;\nusing Microsoft.AppCenter.Analytics;\nusing Microsoft.AppCenter.Crashes;</code></pre>"},{"location":"NetMAUI/getting/#42-add-the-start-method","title":"4.2 Add the Start() Method","text":""},{"location":"NetMAUI/getting/#for-maui-and-xamarinforms","title":"For MAUI and Xamarin.Forms","text":"csharp Copy <pre><code>AppCenter.Start(\"ios={Your App Secret};macos={Your App Secret};android={Your App Secret};uwp={Your App Secret};windowsdesktop={Your App Secret}\", typeof(Analytics), typeof(Crashes));</code></pre>"},{"location":"NetMAUI/getting/#for-xamarinandroid","title":"For Xamarin.Android","text":"csharp Copy <pre><code>AppCenter.Start(\"{Your App Secret}\", typeof(Analytics), typeof(Crashes));</code></pre>"},{"location":"NetMAUI/getting/#for-xamarinios-and-xamarinmac","title":"For Xamarin.iOS and Xamarin.Mac","text":"csharp Copy <pre><code>AppCenter.Start(\"{Your App Secret}\", typeof(Analytics), typeof(Crashes));</code></pre> Warning: It's not recommended to embed your App Secret in source code."},{"location":"NetMAUI/getting/#5-backup-rules-android-only","title":"5. Backup Rules (Android Only)","text":"<p>For Android apps targeting API level 23 or higher with Auto Backup enabled, follow these steps:</p> <ol> <li>Create <code>appcenter_backup_rule.xml</code> file in the <code>Resources/xml</code> folder.</li> <li>Add the appropriate attribute to the <code>&lt;application&gt;</code> element in <code>AndroidManifest.xml</code>.</li> <li>Add the backup rules to the <code>appcenter_backup_rule.xml</code> file.</li> </ol>"},{"location":"NetMAUI/getting/#app-center-data-extraction-rules-for-android","title":"App Center Data Extraction Rules for Android","text":"<p>When using App Center in your Android application, it's important to configure proper data extraction rules. These rules ensure that sensitive App Center data is not included in cloud backups or device transfers, maintaining the integrity and security of your app's analytics and crash reporting.</p>"},{"location":"NetMAUI/getting/#configuration","title":"Configuration","text":"<p>Add the following XML to your <code>appcenter_backup_rule.xml</code> file in the <code>res/xml/</code> directory of your Android project:</p> xml Copy <pre><code>&lt;data-extraction-rules xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n    &lt;cloud-backup&gt;\n        &lt;exclude domain=\"sharedpref\" path=\"AppCenter.xml\"/&gt;\n        &lt;exclude domain=\"database\" path=\"com.microsoft.appcenter.persistence\"/&gt;\n        &lt;exclude domain=\"database\" path=\"com.microsoft.appcenter.persistence-journal\"/&gt;\n        &lt;exclude domain=\"file\" path=\"error\" tools:ignore=\"FullBackupContent\"/&gt;\n        &lt;exclude domain=\"file\" path=\"appcenter\" tools:ignore=\"FullBackupContent\"/&gt;\n    &lt;/cloud-backup&gt;\n    &lt;device-transfer&gt;\n        &lt;exclude domain=\"sharedpref\" path=\"AppCenter.xml\"/&gt;\n        &lt;exclude domain=\"database\" path=\"com.microsoft.appcenter.persistence\"/&gt;\n        &lt;exclude domain=\"database\" path=\"com.microsoft.appcenter.persistence-journal\"/&gt;\n        &lt;exclude domain=\"file\" path=\"error\" tools:ignore=\"FullBackupContent\"/&gt;\n        &lt;exclude domain=\"file\" path=\"appcenter\" tools:ignore=\"FullBackupContent\"/&gt;\n    &lt;/device-transfer&gt;\n&lt;/data-extraction-rules&gt;</code></pre>"},{"location":"NetMAUI/getting/#explanation-of-exclusion-rules","title":"Explanation of Exclusion Rules","text":"<p>These rules exclude specific App Center-related data from both cloud backups and device transfers:</p> <ol> <li>SharedPreferences: </li> <li> <p><code>AppCenter.xml</code>: Contains App Center configuration and state.</p> </li> <li> <p>Databases:</p> </li> <li><code>com.microsoft.appcenter.persistence</code>: Main database for App Center data.</li> <li> <p><code>com.microsoft.appcenter.persistence-journal</code>: Journal file for the main database.</p> </li> <li> <p>Files:</p> </li> <li><code>error</code>: Directory containing error logs.</li> <li><code>appcenter</code>: Directory containing App Center-specific files.</li> </ol> Note: These exclusions are crucial for maintaining the proper functionality of App Center. Including these files in backups or transfers could lead to data inconsistencies or privacy issues when restoring on a different device."},{"location":"NetMAUI/getting/#implementation","title":"Implementation","text":"<p>To apply these rules:</p> <ol> <li>Create the <code>appcenter_backup_rule.xml</code> file in your project's <code>res/xml/</code> directory if it doesn't already exist.</li> <li>Copy the above XML into this file.</li> <li>In your <code>AndroidManifest.xml</code>, add the following attribute to the <code>&lt;application&gt;</code> tag:</li> </ol> xml Copy <pre><code>android:dataExtractionRules=\"@xml/appcenter_backup_rule\"</code></pre> <p>By implementing these data extraction rules, you ensure that App Center data is handled correctly during backup and transfer operations on Android devices.</p>"},{"location":"NetMAUI/logging/","title":"App Center Crashes (MAUI and Xamarin)","text":"Important: Visual Studio App Center is scheduled for retirement on March 31, 2025. While you can continue to use Visual Studio App Center until it is fully retired, there are several recommended alternatives that you may consider migrating to. Learn more about support timelines and alternatives.  <p>App Center Crashes will automatically generate a crash log every time your app crashes. The log is first written to the device's storage and when the user starts the app again, the crash report will be sent to App Center. Collecting crashes works for both beta and live apps, i.e. those submitted to the App Store. Crash logs contain valuable information for you to help fix the crash.</p> <p>Follow the Getting Started section if you haven't set up the SDK in your application yet.</p> <p>Also, crash logs on iOS require Symbolication, check out the App Center Diagnostics documentation that explains how to provide symbols for your app.</p> Note: On iOS and Mac the SDK won't save any crash log if you attached a debugger. Make sure the debugger isn't attached when you crash the iOS and macOS app. On Android, you can crash while having debugger attached but you need to continue execution after breaking into the unhandled exception."},{"location":"NetMAUI/logging/#generate-a-test-crash","title":"Generate a test crash","text":"<p>App Center Crashes provides you with an API to generate a test crash for easy testing of the SDK. This API checks for debug vs release configurations. So you can only use it when debugging as it won't work for release apps.</p> csharp Copy <pre><code>Crashes.GenerateTestCrash();</code></pre>"},{"location":"NetMAUI/logging/#get-more-information-about-a-previous-crash","title":"Get more information about a previous crash","text":"<p>App Center Crashes has two APIs that give you more information in case your app has crashed.</p>"},{"location":"NetMAUI/logging/#did-the-app-receive-a-low-memory-warning-in-the-previous-session","title":"Did the app receive a low memory warning in the previous session?","text":"<p>At any time after starting the SDK, you can check if the app received a memory warning in the previous session:</p> csharp Copy <pre><code>bool hadMemoryWarning = await Crashes.HasReceivedMemoryWarningInLastSessionAsync();</code></pre> Note: This method must only be used after Crashes has been started, it will always return false before start.  Note: In some cases, a device with low memory can't send events."},{"location":"NetMAUI/logging/#did-the-app-crash-in-the-previous-session","title":"Did the app crash in the previous session?","text":"<p>At any time after starting the SDK, you can check if the app crashed in the previous launch:</p> csharp Copy <pre><code>bool didAppCrash = await Crashes.HasCrashedInLastSessionAsync();</code></pre> <p>This comes in handy in case you want to adjust the behavior or UI of your app after a crash has occurred. Some developers choose to show additional UI to apologize to their users, or want a way to get in touch after a crash has occurred.</p> Note: This method must only be used after Crashes has been started, it will always return false before start."},{"location":"NetMAUI/logging/#details-about-the-last-crash","title":"Details about the last crash","text":"<p>If your app crashed previously, you can get details about the last crash.</p> csharp Copy <pre><code>ErrorReport crashReport = await Crashes.GetLastSessionCrashReportAsync();</code></pre> Note: This method must only be used after Crashes has been started, it will always return null before start.  <p>There are numerous use cases for this API, the most common one is people who call this API and implement their custom Crashes delegate or listener.</p>"},{"location":"NetMAUI/logging/#customize-your-usage-of-app-center-crashes","title":"Customize your usage of App Center Crashes","text":"<p>App Center Crashes provides callbacks for developers to do additional actions before and when sending crash logs to App Center.</p> Note: Set the callback before calling AppCenter.Start(), since App Center starts processing crashes immediately after the start."},{"location":"NetMAUI/logging/#should-the-crash-be-processed","title":"Should the crash be processed?","text":"<p>Set this callback if you want to decide if a particular crash needs to be processed or not. For example, there could be a system level crash that you'd want to ignore and that you don't want to send to App Center.</p> csharp Copy <pre><code>Crashes.ShouldProcessErrorReport = (ErrorReport report) =&gt;\n{\n    // Check the report in here and return true or false depending on the ErrorReport.\n    return true;\n};</code></pre>"},{"location":"NetMAUI/logging/#ask-for-the-users-consent-to-send-a-crash-log","title":"Ask for the user's consent to send a crash log","text":"<p>If user privacy is important to you, you might want to get user confirmation before sending a crash report to App Center. The SDK exposes a callback that tells App Center Crashes to await user confirmation before sending any crash reports.</p> <p>If you chose to do so, you're responsible for obtaining the user's confirmation, e.g. through a dialog prompt with one of the following options: Always Send, Send, and Don't send. Based on the input, you'll tell App Center Crashes what to do and the crash will then be handled accordingly.</p> Note: The SDK doesn't display a dialog for this, the app must provide its own UI to ask for user consent.  Note: The app shouldn't call NotifyUserConfirmation explicitly if it doesn't implement a user confirmation dialog; the Crashes module will handle sending logs for you implicitly.  <p>The following callback shows how to tell the SDK to wait for user confirmation before sending crashes:</p> csharp Copy <pre><code>Crashes.ShouldAwaitUserConfirmation = () =&gt;\n{\n    // Build your own UI to ask for user consent here. SDK doesn't provide one by default.\n\n    // Return true if you built a UI for user consent and are waiting for user input on that custom UI, otherwise false.\n    return true;\n};</code></pre> <p>In case you return true in the callback above, your app must obtain (using your own code) user permission and message the SDK with the result using the following API.</p> csharp Copy <pre><code>// Depending on the user's choice, call Crashes.NotifyUserConfirmation() with the right value.\nCrashes.NotifyUserConfirmation(UserConfirmation.DontSend);\nCrashes.NotifyUserConfirmation(UserConfirmation.Send);\nCrashes.NotifyUserConfirmation(UserConfirmation.AlwaysSend);</code></pre> <p>As an example you can refer to our custom dialog example.</p>"},{"location":"NetMAUI/logging/#get-information-about-the-sending-status-for-a-crash-log","title":"Get information about the sending status for a crash log","text":"<p>At times, you want to know the status of your app crash. A common use case is that you might want to show UI that tells the users that your app is submitting a crash report, or, in case your app is crashing quickly after the launch, you want to adjust the behavior of the app to make sure the crash logs can be submitted. App Center Crashes provides three different callbacks that you can use in your app to be notified of what's going on:</p>"},{"location":"NetMAUI/logging/#the-following-callback-will-be-invoked-before-the-sdk-sends-a-crash-log","title":"The following callback will be invoked before the SDK sends a crash log","text":"csharp Copy <pre><code>Crashes.SendingErrorReport += (sender, e) =&gt;\n{\n    // Your code, e.g. to present a custom UI.\n};</code></pre> <p>In case we have network issues or an outage on the endpoint, and you restart the app, SendingErrorReport is triggered again after process restart.</p>"},{"location":"NetMAUI/logging/#the-following-callback-will-be-invoked-after-the-sdk-sent-a-crash-log-successfully","title":"The following callback will be invoked after the SDK sent a crash log successfully","text":"csharp Copy <pre><code>Crashes.SentErrorReport += (sender, e) =&gt;\n{\n    // Your code, e.g. to hide the custom UI.\n};</code></pre>"},{"location":"NetMAUI/logging/#the-following-callback-will-be-invoked-if-the-sdk-has-failed-to-send-a-crash-log","title":"The following callback will be invoked if the SDK has failed to send a crash log","text":"csharp Copy <pre><code>Crashes.FailedToSendErrorReport += (sender, e) =&gt;\n{\n    // Your code goes here.\n};</code></pre> <p>Receiving FailedToSendErrorReport means a non-recoverable error such as a 4xx code occurred. For example, 401 means the appSecret is wrong.</p> <p>This callback isn't triggered if it's a network issue. In this case, the SDK keeps retrying (and also pauses retries while the network connection is down).</p>"},{"location":"NetMAUI/logging/#add-attachments-to-a-crash-report","title":"Add attachments to a crash report","text":"<p>You can add binary and text attachments to a crash report. The SDK will send them along with the crash so that you can see them in App Center portal. The following callback will be invoked right before sending the stored crash from previous application launches. It won't be invoked when the crash happens. Be sure the attachment file is not named minidump.dmp as that name is reserved for minidump files. Here is an example of how to attach text and an image to a crash:</p> csharp Copy <pre><code>Crashes.GetErrorAttachments = (ErrorReport report) =&gt;\n{\n    // Your code goes here.\n    return new ErrorAttachmentLog[]\n    {\n        ErrorAttachmentLog.AttachmentWithText(\"Hello world!\", \"hello.txt\"),\n        ErrorAttachmentLog.AttachmentWithBinary(Encoding.UTF8.GetBytes(\"Fake image\"), \"fake_image.jpeg\", \"image/jpeg\")\n    };\n};</code></pre> Note: The size limit is currently 7 MB. Attempting to send a larger attachment will trigger an error."},{"location":"NetMAUI/logging/#enable-or-disable-app-center-crashes-at-runtime","title":"Enable or disable App Center Crashes at runtime","text":"<p>You can enable and disable App Center Crashes at runtime. If you disable it, the SDK won't do any crash reporting for the app.</p> csharp Copy <pre><code>Crashes.SetEnabledAsync(false);</code></pre> <p>To enable App Center Crashes again, use the same API but pass true as a parameter.</p> csharp Copy <pre><code>Crashes.SetEnabledAsync(true);</code></pre> <p>You don't need to await this call to make other API calls (such as IsEnabledAsync) consistent.</p> <p>The state is persisted in the device's storage across application launches.</p> Note: This method must only be used after Crashes has been started."},{"location":"NetMAUI/logging/#check-if-app-center-crashes-is-enabled","title":"Check if App Center Crashes is enabled","text":"<p>You can also check if App Center Crashes is enabled or not:</p> csharp Copy <pre><code>bool isEnabled = await Crashes.IsEnabledAsync();</code></pre> Note: This method must only be used after Crashes has been started, it will always return false before start."},{"location":"NetMAUI/logging/#handled-errors","title":"Handled Errors","text":"<p>App Center also allows you to track errors by using handled exceptions. To do so, use the TrackError method:</p> csharp Copy <pre><code>try {\n    // your code goes here.\n} catch (Exception exception) {\n    Crashes.TrackError(exception);\n}</code></pre> <p>An app can optionally attach properties to a handled error report to provide further context. Pass the properties as a dictionary of key/value pairs (strings only) as shown in the example below.</p> csharp Copy <pre><code>try {\n    // your code goes here.\n} catch (Exception exception) {\n    var properties = new Dictionary\n    {\n        { \"Category\", \"Music\" },\n        { \"Wifi\", \"On\"}\n    };\n    Crashes.TrackError(exception, properties); \n}\n\n\n<p>You can also optionally add binary and text attachments to a handled error report. Pass the attachments as an array of ErrorAttachmentLog objects as shown in the example below.</p>\n\n  \n    csharp\n    \n      Copy\n    \n  \n  <pre><code>try {\n    // your code goes here.\n} catch (Exception exception) {\n    var attachments = new ErrorAttachmentLog[]\n    {\n        ErrorAttachmentLog.AttachmentWithText(\"Hello world!\", \"hello.txt\"),\n        ErrorAttachmentLog.AttachmentWithBinary(Encoding.UTF8.GetBytes(\"Fake image\"), \"fake_image.jpeg\", \"image/jpeg\")\n    };\n    Crashes.TrackError(exception, attachments: attachments);\n}</code></pre>"},{"location":"Rest/Analytics/","title":"Analytics","text":""},{"location":"Rest/Analytics/#submit-analytics-event","title":"Submit Analytics Event","text":"<p>This endpoint allows you to submit analytics events for your application. Authentication is required.</p>"},{"location":"Rest/Analytics/#endpoint","title":"Endpoint","text":"http Copy <pre><code>POST https://appambitv2-restless-morning-3748.fly.dev/api/analytics</code></pre>"},{"location":"Rest/Analytics/#authentication","title":"Authentication","text":"<p>This endpoint requires authentication. Include your API key in the Authorization header.</p> Important: Keep your API key confidential. Never share it in publicly accessible areas such as GitHub, client-side code, and so forth."},{"location":"Rest/Analytics/#example-request","title":"Example Request","text":"curl Copy <pre><code>curl --request POST \\\n    \"https://appambitv2-restless-morning-3748.fly.dev/api/analytics\" \\\n    --header \"Authorization: Bearer {YOUR_AUTH_KEY}\" \\\n    --header \"Content-Type: application/json\" \\\n    --header \"Accept: application/json\" \\\n    --data '{\n    \"analytics\": {\n        \"event_title\": \"\\\"Member Data Loaded\\\"\",\n        \"session_id\": \"1\",\n        \"data\": \"[{ \\\"a\\\": \\\"b\\\" }, {\\\"x\\\": \\\"y\\\"}]\"\n    }\n}'</code></pre>"},{"location":"Rest/Analytics/#headers","title":"Headers","text":"Header Value Required Description Authorization Bearer {YOUR_AUTH_KEY} Yes Your API key for authentication Content-Type application/json Yes Indicates the request body format Accept application/json Yes Indicates the response format"},{"location":"Rest/Analytics/#body-parameters","title":"Body Parameters","text":"<p>The request body should contain a JSON object with an <code>analytics</code> property. The <code>analytics</code> object has the following structure:</p> Parameter Type Required Description event_title string Yes A brief descriptive name of the event under concern session_id string Yes The current session id of the user data json Yes A JSON array with relevant analytics data"},{"location":"Rest/Analytics/#example-body","title":"Example Body","text":"json Copy <pre><code>{\n  \"analytics\": {\n    \"event_title\": \"\\\"Member Data Loaded\\\"\",\n    \"session_id\": \"1\",\n    \"data\": \"[{ \\\"a\\\": \\\"b\\\" }, {\\\"x\\\": \\\"y\\\"}]\"\n  }\n}</code></pre> Note: The <code>data</code> field is a JSON string containing an array of objects. Ensure proper escaping when constructing the request body."},{"location":"Rest/Analytics/#response","title":"Response","text":"<p>Upon successful submission, the server will respond with a confirmation message. The exact format of the response may vary based on the specific implementation.</p>"},{"location":"Rest/consumer/","title":"Register a Consumer","text":""},{"location":"Rest/consumer/#overview","title":"Overview","text":"<p>This endpoint facilitates the registration of a consumer, associating their device and application details with the system.</p>"},{"location":"Rest/consumer/#endpoint","title":"Endpoint","text":"http Copy <pre><code>POST /api/app-consumer/register</code></pre>"},{"location":"Rest/consumer/#request-details","title":"Request Details","text":""},{"location":"Rest/consumer/#http-method","title":"HTTP Method","text":"<p><code>POST</code></p>"},{"location":"Rest/consumer/#content-type","title":"Content-Type","text":"<p><code>application/json</code></p>"},{"location":"Rest/consumer/#headers","title":"Headers","text":"Header Name Type Required Description Content-Type string Yes Must be <code>application/json</code> Accept string Yes Must be <code>application/json</code>"},{"location":"Rest/consumer/#body-parameters","title":"Body Parameters","text":"<p>The request body should contain a JSON object with a <code>consumer</code> property. The <code>consumer</code> object has the following structure:</p> json Copy <pre><code>{\n  \"consumer\": {\n    \"app_key\": \"4217afa8-7e54-4fb2-a9af-aef7fe61d363\",\n    \"app_version\": \"1.10.25\",\n    \"device_id\": \"18997\",\n    \"device_model\": \"iPhone 15\",\n    \"user_id\": \"1145\",\n    \"is_guest\": false,\n    \"user_email\": \"admin@gmail.com\",\n    \"os\": \"ios 14\",\n    \"platform\": \"ios\",\n    \"country\": \"us\",\n    \"language\": \"en\"\n  }\n}</code></pre>"},{"location":"Rest/consumer/#parameter-details","title":"Parameter Details","text":"Parameter Type Required Description app_key string Yes The application key (UUID) app_version string Yes The application version device_id string Yes The device ID device_model string Yes The user's device model user_id string Yes The user ID is_guest boolean Yes Whether the user is a guest user_email string No* The user email (required if <code>is_guest</code> is <code>false</code>) os string Yes The operating system platform string Yes The user's main platform country string Yes The user's country (2-letter ISO code) language string Yes The user's language (2-letter ISO code) <p>* <code>user_email</code> is required when <code>is_guest</code> is <code>false</code>.</p>"},{"location":"Rest/consumer/#example-request","title":"Example Request","text":"curl Copy <pre><code>curl -X POST \\\n  https://api.example.com/api/app-consumer/register \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\n  \"consumer\": {\n    \"app_key\": \"4217afa8-7e54-4fb2-a9af-aef7fe61d363\",\n    \"app_version\": \"1.10.25\",\n    \"device_id\": \"18997\",\n    \"device_model\": \"iPhone 15\",\n    \"user_id\": \"1145\",\n    \"is_guest\": false,\n    \"user_email\": \"admin@gmail.com\",\n    \"os\": \"ios 14\",\n    \"platform\": \"ios\",\n    \"country\": \"us\",\n    \"language\": \"en\"\n  }\n}'</code></pre>"},{"location":"Rest/consumer/#response","title":"Response","text":"<p>A successful request will return a JSON response with details of the registered consumer. The specific structure of the response will depend on your API implementation.</p>"},{"location":"Rest/post_log/","title":"Submit App Log","text":"<p>This endpoint allows you to submit application logs. Authentication is required.</p>"},{"location":"Rest/post_log/#endpoint","title":"Endpoint","text":"http Copy <pre><code>POST https://appambitv2-restless-morning-3748.fly.dev/api/app/log</code></pre>"},{"location":"Rest/post_log/#authentication","title":"Authentication","text":"<p>This endpoint requires authentication. Include your API key in the Authorization header.</p> Important: Keep your API key confidential. Never share it in publicly accessible areas such as GitHub, client-side code, and so forth."},{"location":"Rest/post_log/#example-request","title":"Example Request","text":"curl Copy <pre><code>curl --request POST \\\n    \"https://appambitv2-restless-morning-3748.fly.dev/api/app/log\" \\\n    --header \"Authorization: Bearer {YOUR_AUTH_KEY}\" \\\n    --header \"Content-Type: multipart/form-data\" \\\n    --header \"Accept: application/json\" \\\n    --form \"logSummary[title]=error\"\\\n    --form \"logSummary[app_version]=neque\"\\\n    --form \"logSummary[country_iso]=fugit\"\\\n    --form \"logSummary[device_id]=magni\"\\\n    --form \"logSummary[device_model]=enim\"\\\n    --form \"logSummary[platform]=eaque\"\\\n    --form \"logSummary[groups][][title]=laudantium\"\\\n    --form \"logSummary[groups][][description]=Voluptatem sunt harum ad sit id.\"\\\n    --form \"logSummary[groups][][count]=5\"\\\n    --form \"logFile=@/tmp/php4hpCIj\"</code></pre>"},{"location":"Rest/post_log/#headers","title":"Headers","text":"Header Value Required Description Authorization Bearer {YOUR_AUTH_KEY} Yes Your API key for authentication Content-Type multipart/form-data Yes Indicates the request body format Accept application/json Yes Indicates the response format"},{"location":"Rest/post_log/#body-parameters","title":"Body Parameters","text":"<p>The request body should be sent as <code>multipart/form-data</code> and include the following fields:</p>"},{"location":"Rest/post_log/#logfile","title":"logFile","text":"Parameter Type Required Description logFile file Yes The log file to be uploaded"},{"location":"Rest/post_log/#logsummary","title":"logSummary","text":"<p>The <code>logSummary</code> object contains metadata about the log. It has the following structure:</p> Parameter Type Required Description title string Yes Title of the log entry app_version string Yes Version of the application country_iso string Yes ISO code of the country device_id string Yes Unique identifier of the device device_model string Yes Model of the device platform string Yes Platform of the device (e.g., iOS, Android)"},{"location":"Rest/post_log/#groups","title":"groups","text":"<p>The <code>groups</code> array within <code>logSummary</code> can contain multiple objects, each with the following structure:</p> Parameter Type Required Description title string Yes Title of the group description string Yes Description of the group log_type string No Type of the log (optional) count integer Yes Count associated with the group"},{"location":"Rest/post_log/#example-form-data","title":"Example Form Data","text":"<p>Here's an example of how the form data should be structured:</p> Note: The <code>logFile</code> should be a file upload. In the curl example, it's represented by <code>@/tmp/php4hpCIj</code>, which is a path to a local file."},{"location":"Rest/post_log/#response","title":"Response","text":"<p>Upon successful submission, the server will respond with a confirmation message. The exact format of the response may vary based on the specific implementation.</p>"},{"location":"Rest/post_session_end/","title":"End Session","text":"<p>Ends an active session.</p> <p>Endpoint: <code>POST /api/session/end</code></p> <p>Requires authentication</p>"},{"location":"Rest/post_session_end/#authentication","title":"Authentication","text":"<p>This endpoint requires a valid Bearer token in the Authorization header.</p>"},{"location":"Rest/post_session_end/#request-headers","title":"Request Headers","text":"Header Required Description Authorization Yes Bearer {YOUR_AUTH_KEY} Content-Type Yes application/json Accept Yes application/json"},{"location":"Rest/post_session_end/#request-body-parameters","title":"Request Body Parameters","text":"Parameter Type Required Description timestamp date Yes This should be in ISO8601 format. Example: 2024-12-09T15:30:00Z, 2024-12-09T15:30:00+05:30, 2024-12-09T15:30:00-08:00 session_id string Yes The ID of the session to end. Example: 1"},{"location":"Rest/post_session_end/#example-request","title":"Example Request","text":"curl Copy <pre><code>\ncurl --request POST \\\n    \"https://appambitv2-restless-morning-3748.fly.dev/api/session/end\" \\\n    --header \"Authorization: Bearer {YOUR_AUTH_KEY}\" \\\n    --header \"Content-Type: application/json\" \\\n    --header \"Accept: application/json\" \\\n    --data \"{\n    \\\"timestamp\\\": \\\"2024-12-09T15:30:00Z\\\",\n    \\\"session_id\\\": \\\"1\\\"\n}\"\n</code></pre>"},{"location":"Rest/post_session_start/","title":"Session Start","text":"<p>Initiates a new session.</p> <p>Endpoint: <code>POST /api/session/start</code></p> <p>Requires authentication</p>"},{"location":"Rest/post_session_start/#authentication","title":"Authentication","text":"<p>This endpoint requires a valid Bearer token in the Authorization header.</p>"},{"location":"Rest/post_session_start/#request-headers","title":"Request Headers","text":"Header Required Description Authorization Yes Bearer {YOUR_AUTH_KEY} Content-Type Yes application/json Accept Yes application/json"},{"location":"Rest/post_session_start/#request-body-parameters","title":"Request Body Parameters","text":"Parameter Type Required Description timestamp date Yes This should be in ISO8601 format. Example: 2024-12-09T15:30:00Z, 2024-12-09T15:30:00+05:30, 2024-12-09T15:30:00-08:00"},{"location":"Rest/post_session_start/#example-request","title":"Example Request","text":"curl Copy <pre><code>curl --request POST \\\n    \"https://appambitv2-restless-morning-3748.fly.dev/api/session/start\" \\\n    --header \"Authorization: Bearer {YOUR_AUTH_KEY}\" \\\n    --header \"Content-Type: application/json\" \\\n    --header \"Accept: application/json\" \\\n    --data \"{\n    \\\"timestamp\\\": \\\"2024-12-09T15:30:00Z\\\"\n}\"</code></pre>"}]}